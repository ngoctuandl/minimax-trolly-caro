{"version":3,"sources":["features/play-cell-picker/minimax.js","App.js","serviceWorker.js","index.js"],"names":["MAX_VALUE","MIN_VALUE","DRAW_VALUE","INFINITY","Infinity","WIN_GAME","LOSE_GAME","DRAW_GAME","UN_IDENTIFY_GAME","checkGameState","board","row","col","value","arguments","length","undefined","result","count","c","checkGameRowState","r","checkGameColState","i","checkingRow","checkingCol","checkGameCrossFromTopLeftState","checkGameCrossFromTopRightState","breakable","minimaxCellValue","moveRow","moveCol","isMaximizingPlayer","deep","playingValue","playingBoard","curBoard","Object","toConsumableArray","curRow","setBoardStatus","bestVal","Math","max","log","concat","min","pickCellByMiniMax","logs","splice","cellValue","setTimeout","printLogs","key","msg","push","console","window","from","to","filter","printedLogs","cellPadding","numOfCells","boardSize","innerWidth","innerHeight","padding","cellSize","endRowX","endColY","cellLineWidth","markLineWidth","drawBoard","context","beginPath","beginRow","endRow","beginCol","endCol","moveTo","lineTo","lineWidth","strokeStyle","stroke","cellPos","nextRow","nextCol","playX","_cellPos","drawX","playO","_pickCellByMiniMax","_cellPos2","arc","PI","drawO","drawContext","drawCanvas","gameDone","processMouseClick","canvas","event","_getMousePosition","rect","getBoundingClientRect","x","clientX","left","y","clientY","top","getMousePosition","_toCellPosition","parseInt","toCellPosition","getContext","checkCaroGameState","_playO","gameState","Swal","fire","title","text","imageUrl","imageWidth","imageAlt","animation","onClose","initBoard","clearRect","width","height","App","useRef","useEffect","ctx","current","react_default","a","createElement","ref","onClick","e","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9ec72d4e.chunk.js","sourcesContent":["const MAX_VALUE = 10;\r\nconst MIN_VALUE = -10;\r\nconst DRAW_VALUE = 0;\r\nconst INFINITY = Infinity;\r\n\r\nexport const WIN_GAME = 1;\r\nexport const LOSE_GAME = -1;\r\nexport const DRAW_GAME = 0;\r\nexport const UN_IDENTIFY_GAME = 2;\r\n\r\nexport function checkGameRowState(board, row, col, value) {\r\n  let count = 0;\r\n  for (\r\n    let c = col - 3 > 0 ? col - 3 : 0;\r\n    c < col + 3 && c < board[row].length;\r\n    c++\r\n  ) {\r\n    if (board[row][c] === value) {\r\n      count++;\r\n      if (count === 3) {\r\n        return value > 0 ? WIN_GAME : LOSE_GAME;\r\n      }\r\n    } else {\r\n      count = 0;\r\n    }\r\n  }\r\n\r\n  return UN_IDENTIFY_GAME;\r\n}\r\n\r\nexport function checkGameColState(board, row, col, value) {\r\n  let count = 0;\r\n  for (\r\n    let r = row - 3 > 0 ? row - 3 : 0;\r\n    r < row + 3 && r < board.length;\r\n    r++\r\n  ) {\r\n    if (board[r][col] === value) {\r\n      count++;\r\n      if (count === 3) {\r\n        return value > 0 ? WIN_GAME : LOSE_GAME;\r\n      }\r\n    } else {\r\n      count = 0;\r\n    }\r\n  }\r\n\r\n  return UN_IDENTIFY_GAME;\r\n}\r\n\r\nexport function checkGameCrossFromTopLeftState(board, row, col, value) {\r\n  let count = 0;\r\n\r\n  for (let i = -3; i <= 3; i++) {\r\n    const checkingRow = row + i;\r\n    const checkingCol = col + i;\r\n    if (\r\n      checkingCol < 0 ||\r\n      checkingCol >= board[row].length ||\r\n      checkingRow < 0 ||\r\n      checkingRow >= board.length\r\n    ) {\r\n      continue;\r\n    }\r\n    if (board[checkingRow][checkingCol] === value) {\r\n      count++;\r\n      if (count === 3) {\r\n        return value > 0 ? WIN_GAME : LOSE_GAME;\r\n      }\r\n    } else {\r\n      count = 0;\r\n    }\r\n  }\r\n\r\n  return UN_IDENTIFY_GAME;\r\n}\r\n\r\nexport function checkGameCrossFromTopRightState(board, row, col, value) {\r\n  let count = 0;\r\n\r\n  for (let r = -3; r <= 3; r++) {\r\n    const checkingRow = row + r;\r\n    const checkingCol = col - r;\r\n    if (\r\n      checkingCol < 0 ||\r\n      checkingCol >= board[row].length ||\r\n      checkingRow < 0 ||\r\n      checkingRow >= board.length\r\n    ) {\r\n      continue;\r\n    }\r\n\r\n    if (board[checkingRow][checkingCol] === value) {\r\n      count++;\r\n      if (count === 3) {\r\n        return value > 0 ? WIN_GAME : LOSE_GAME;\r\n      }\r\n    } else {\r\n      count = 0;\r\n    }\r\n  }\r\n\r\n  return UN_IDENTIFY_GAME;\r\n}\r\n\r\nexport function checkGameState(board, row, col, value = -1) {\r\n  if (board[row][col] === 0) {\r\n    return UN_IDENTIFY_GAME;\r\n  }\r\n  let result = checkGameRowState(board, row, col, value);\r\n  if (result !== UN_IDENTIFY_GAME) {\r\n    return result;\r\n  }\r\n  result = checkGameColState(board, row, col, value);\r\n  if (result !== UN_IDENTIFY_GAME) {\r\n    return result;\r\n  }\r\n\r\n  result = checkGameCrossFromTopLeftState(board, row, col, value);\r\n  if (result !== UN_IDENTIFY_GAME) {\r\n    return result;\r\n  }\r\n\r\n  result = checkGameCrossFromTopRightState(board, row, col, value);\r\n  if (result !== UN_IDENTIFY_GAME) {\r\n    return result;\r\n  }\r\n\r\n  let breakable = false;\r\n  for (let r = 0; r < board.length; r++) {\r\n    for (let c = 0; c < board[r].length; c++) {\r\n      breakable = board[r][c] === 0;\r\n      if (breakable) {\r\n        break;\r\n      }\r\n    }\r\n    if (breakable) {\r\n      break;\r\n    }\r\n  }\r\n\r\n  if (!breakable) {\r\n    return DRAW_GAME;\r\n  }\r\n  return result;\r\n}\r\n\r\nfunction setBoardStatus(board, row, col, value) {\r\n  const curBoard = [...board];\r\n  const curRow = [...curBoard[row]];\r\n  curRow[col] = value;\r\n  curBoard[row] = curRow;\r\n\r\n  return curBoard;\r\n}\r\n\r\nfunction minimaxCellValue(board, moveRow, moveCol, isMaximizingPlayer, deep) {\r\n  const playingValue = isMaximizingPlayer ? 1 : -1;\r\n  const playingBoard = setBoardStatus(board, moveRow, moveCol, playingValue);\r\n\r\n  if (\r\n    checkGameState(playingBoard, moveRow, moveCol, playingValue) === WIN_GAME\r\n  ) {\r\n    return MAX_VALUE;\r\n  }\r\n  if (\r\n    checkGameState(playingBoard, moveRow, moveCol, playingValue) === LOSE_GAME\r\n  ) {\r\n    return MIN_VALUE;\r\n  }\r\n  if (\r\n    checkGameState(playingBoard, moveRow, moveCol, playingValue) === DRAW_GAME\r\n  ) {\r\n    return DRAW_VALUE;\r\n  }\r\n\r\n  if (isMaximizingPlayer) {\r\n    let bestVal = -INFINITY;\r\n    for (let r = 0; r < playingBoard.length; r++) {\r\n      for (let c = 0; c < playingBoard[r].length; c++) {\r\n        if (playingBoard[r][c] !== 0) {\r\n          continue;\r\n        }\r\n\r\n        const value = minimaxCellValue(playingBoard, r, c, false, deep + 1);\r\n\r\n        bestVal = Math.max(bestVal, value);\r\n        log(\r\n          \"de quy\",\r\n          `max {moveRow:${moveRow},moveCol:${moveCol}} {r:${r},c:${c}} value:${value} best:${bestVal}`\r\n        );\r\n      }\r\n    }\r\n    return bestVal;\r\n  } else {\r\n    let bestVal = +INFINITY;\r\n\r\n    for (let r = 0; r < playingBoard.length; r++) {\r\n      for (let c = 0; c < playingBoard[r].length; c++) {\r\n        if (playingBoard[r][c] !== 0) {\r\n          continue;\r\n        }\r\n        const value = minimaxCellValue(playingBoard, r, c, true, deep + 1);\r\n        bestVal = Math.min(bestVal, value);\r\n\r\n        log(\r\n          \"de quy\",\r\n          `min {moveRow:${moveRow},moveCol:${moveCol}} {r:${r},c:${c}} value:${value} best:${bestVal}`\r\n        );\r\n      }\r\n    }\r\n    return bestVal;\r\n  }\r\n}\r\n\r\nexport const pickCellByMiniMax = board => {\r\n  logs.splice(0, logs.length);\r\n\r\n  let col = 0,\r\n    row = 0;\r\n  let min = +INFINITY;\r\n  for (let r = 0; r < board.length; r++) {\r\n    for (let c = 0; c < board[r].length; c++) {\r\n      if (board[r][c] !== 0) {\r\n        continue;\r\n      }\r\n      const cellValue = minimaxCellValue(board, r, c, false, 0);\r\n      log(\"gia tri\", `cell[${r},${c}]=${cellValue}`);\r\n      if (cellValue < min) {\r\n        col = c;\r\n        row = r;\r\n        min = cellValue;\r\n      }\r\n    }\r\n  }\r\n\r\n  setTimeout(printLogs, 500);\r\n  return { row, col };\r\n};\r\n\r\nconst logs = [];\r\nfunction log(key, msg) {\r\n  logs.push({ key, msg });\r\n}\r\n\r\nfunction printLogs() {\r\n  console.log(logs.length);\r\n}\r\n\r\nwindow.printLogs = (from = 0, to = logs.length, filter = value => true) => {\r\n  let printedLogs = logs.filter(filter);\r\n  printedLogs = printedLogs.splice(from, to);\r\n\r\n  console.log(printedLogs);\r\n};\r\n","import React, { useRef, useEffect } from \"react\";\r\nimport Swal from \"sweetalert2\";\r\n\r\nimport {\r\n  pickCellByMiniMax,\r\n  checkGameState,\r\n  UN_IDENTIFY_GAME,\r\n  WIN_GAME,\r\n  LOSE_GAME,\r\n  DRAW_GAME\r\n} from \"./features\";\r\n\r\nconst cellPadding = 10.0;\r\nconst numOfCells = 3;\r\nlet board = [];\r\nconst boardSize = Math.min(window.innerWidth, window.innerHeight);\r\nconst padding = 5.0;\r\nconst cellSize = (boardSize - padding * 2) / numOfCells;\r\nconst endRowX = boardSize - padding * 2;\r\nconst endColY = boardSize - padding * 2;\r\nconst cellLineWidth = 1;\r\nconst markLineWidth = 6;\r\n\r\nfunction drawBoard(context) {\r\n  context.beginPath();\r\n\r\n  for (var i = 0; i <= numOfCells; i++) {\r\n    const row = i * cellSize + padding;\r\n    const beginRow = [padding, row > endColY ? endColY : row];\r\n    const endRow = [endRowX, row > endColY ? endColY : row];\r\n\r\n    const col = i * cellSize + padding;\r\n    const beginCol = [col > endRowX ? endRowX : col, padding];\r\n    const endCol = [col > endRowX ? endRowX : col, endColY];\r\n\r\n    context.moveTo(beginRow[0], beginRow[1]);\r\n    context.lineTo(endRow[0], endRow[1]);\r\n\r\n    context.moveTo(beginCol[0], beginCol[1]);\r\n    context.lineTo(endCol[0], endCol[1]);\r\n  }\r\n\r\n  context.lineWidth = cellLineWidth;\r\n  context.strokeStyle = \"black\";\r\n  context.stroke();\r\n}\r\n\r\nfunction getMousePosition(canvas, event) {\r\n  const rect = canvas.getBoundingClientRect();\r\n  const x = event.clientX - rect.left;\r\n  const y = event.clientY - rect.top;\r\n\r\n  return { x, y };\r\n}\r\n\r\nfunction toCellPosition(x, y) {\r\n  const col = parseInt((x - padding) / cellSize, 10);\r\n  const row = parseInt((y - padding) / cellSize, 10);\r\n\r\n  return { col, row };\r\n}\r\n\r\nfunction isPlayable(r, c) {\r\n  return board[r][c] === 0;\r\n}\r\n\r\nfunction cellPos(r, c) {\r\n  const row = r * cellSize + padding;\r\n  const nextRow = row + cellSize > endRowX ? endRowX : row + cellSize;\r\n\r\n  const col = c * cellSize + padding;\r\n  const nextCol = col + cellSize > endColY ? endColY : col + cellSize;\r\n\r\n  return { row, nextRow, col, nextCol };\r\n}\r\nfunction drawX(context, r, c) {\r\n  const { row, nextRow, col, nextCol } = cellPos(r, c);\r\n\r\n  context.beginPath();\r\n\r\n  context.moveTo(col + cellPadding, row + cellPadding);\r\n  context.lineTo(nextCol - cellPadding, nextRow - cellPadding);\r\n\r\n  context.moveTo(nextCol - cellPadding, row + cellPadding);\r\n  context.lineTo(col + cellPadding, nextRow - cellPadding);\r\n\r\n  context.lineWidth = markLineWidth;\r\n  context.strokeStyle = \"orange\";\r\n  context.stroke();\r\n}\r\n\r\nfunction playX(context, row, col) {\r\n  if (!isPlayable(row, col)) {\r\n    return false;\r\n  }\r\n\r\n  drawX(context, row, col);\r\n\r\n  board[row][col] = 1;\r\n  return true;\r\n}\r\n\r\nfunction drawO(context, r, c) {\r\n  const { row, col } = cellPos(r, c);\r\n  context.beginPath();\r\n  context.arc(\r\n    col + cellSize / 2,\r\n    row + cellSize / 2,\r\n    cellSize / 2 - cellPadding,\r\n    0,\r\n    2 * Math.PI\r\n  );\r\n\r\n  context.lineWidth = markLineWidth;\r\n  context.strokeStyle = \"green\";\r\n  context.stroke();\r\n}\r\n\r\nfunction playO(context) {\r\n  const { row, col } = pickCellByMiniMax(board);\r\n\r\n  drawO(context, row, col);\r\n\r\n  board[row][col] = -1;\r\n\r\n  return { row, col };\r\n}\r\n\r\nlet gameDone = false;\r\n\r\nfunction processMouseClick(canvas, event) {\r\n  if (gameDone) {\r\n    return;\r\n  }\r\n  const { x, y } = getMousePosition(canvas, event);\r\n  const { col, row } = toCellPosition(x, y);\r\n\r\n  if (row < 0 || row >= numOfCells || col < 0 || col >= numOfCells) {\r\n    return;\r\n  }\r\n\r\n  if (!playX(canvas.getContext(\"2d\"), row, col)) {\r\n    return;\r\n  }\r\n\r\n  if (checkCaroGameState(row, col, 1) !== UN_IDENTIFY_GAME) {\r\n    return;\r\n  }\r\n\r\n  const { row: rowO, col: colO } = playO(canvas.getContext(\"2d\"), row, col);\r\n\r\n  checkCaroGameState(rowO, colO, -1);\r\n}\r\n\r\nfunction checkCaroGameState(row, col, value) {\r\n  const gameState = checkGameState(board, row, col, value);\r\n\r\n  switch (gameState) {\r\n    case WIN_GAME:\r\n      Swal.fire({\r\n        title: \"Móa!\",\r\n        text: \"Dơơơơ...\",\r\n        imageUrl: \"images/thua.png\",\r\n        imageWidth: 400,\r\n        imageAlt: \"Móa! Dơơơơ...\",\r\n        animation: true,\r\n        onClose: () => {\r\n          gameDone = false;\r\n          initBoard();\r\n          drawContext.clearRect(0, 0, drawCanvas.width, drawCanvas.height);\r\n          drawBoard(drawContext);\r\n        }\r\n      });\r\n      gameDone = true;\r\n      break;\r\n    case LOSE_GAME:\r\n      Swal.fire({\r\n        title: \"Thua chưa!\",\r\n        text: \"AI đấy...\",\r\n        imageUrl: \"images/thang.gif\",\r\n        imageWidth: 400,\r\n        imageAlt: \"Thua chưa! AI đấy...\",\r\n        animation: true,\r\n        onClose: () => {\r\n          gameDone = false;\r\n          initBoard();\r\n          drawContext.clearRect(0, 0, drawCanvas.width, drawCanvas.height);\r\n          drawBoard(drawContext);\r\n        }\r\n      });\r\n\r\n      gameDone = true;\r\n      break;\r\n    case DRAW_GAME:\r\n      Swal.fire({\r\n        title: \"Hòa!\",\r\n        text: \"Hòa cái beep...\",\r\n        imageUrl: \"images/hoa.png\",\r\n        imageWidth: 400,\r\n        imageAlt: \"Thua chưa! AI đấy...\",\r\n        animation: true,\r\n        onClose: () => {\r\n          gameDone = false;\r\n          initBoard();\r\n\r\n          drawContext.clearRect(0, 0, drawCanvas.width, drawCanvas.height);\r\n          drawBoard(drawContext);\r\n        }\r\n      });\r\n\r\n      gameDone = true;\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n\r\n  return gameState;\r\n}\r\n\r\nfunction initBoard() {\r\n  board = [];\r\n  for (var r = 0; r < numOfCells; r++) {\r\n    board[r] = [];\r\n    for (var c = 0; c < numOfCells; c++) {\r\n      board[r].push(0);\r\n    }\r\n  }\r\n}\r\nlet drawContext;\r\nlet drawCanvas;\r\n\r\nfunction App() {\r\n  const canvas = useRef(null);\r\n  useEffect(() => {\r\n    initBoard();\r\n\r\n    const ctx = canvas.current.getContext(\"2d\");\r\n    drawCanvas = canvas.current;\r\n    drawContext = ctx;\r\n    drawBoard(ctx);\r\n  });\r\n\r\n  return (\r\n    <canvas\r\n      width={boardSize}\r\n      height={boardSize}\r\n      ref={canvas}\r\n      onClick={e => {\r\n        processMouseClick(canvas.current, e);\r\n      }}\r\n    />\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}